{"ast":null,"code":"var _jsxFileName = \"/home/bogdan/project-manager-app/src/components/taskPageContent/taskList/TaskList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './TaskList.module.css';\nimport TaskListItem from '../../../components/taskListItem/TaskListItem';\nimport { getLoading, getVisibleTasks } from '../../../redux/tasks/task-selectors';\nimport { fetchTasks } from '../../../redux/tasks/task-operations';\nimport { useParams } from 'react-router-dom';\nimport ChartModal from '../../graph/modal/ChartModal';\nimport Loader from '../../loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TaskList = ({\n  taskDate\n}) => {\n  _s();\n\n  const {\n    sprintId\n  } = useParams();\n  const tasks = useSelector(getVisibleTasks);\n  const isLoading = useSelector(getLoading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchTasks(sprintId));\n  }, [dispatch, sprintId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : !tasks.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.emptyMessageBox,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.emptyMessage,\n        children: \"Your task collection is empty, use the \\\"Create task\\\" button.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this), !!tasks.length && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.taskList,\n      children: tasks.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.taskCard,\n        children: /*#__PURE__*/_jsxDEV(TaskListItem, {\n          item: item,\n          taskDate: taskDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)\n      }, item._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChartModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TaskList, \"K/K/+wd6DsQ9JFP+JkrRBj4zEOM=\", false, function () {\n  return [useParams, useSelector, useSelector, useDispatch];\n});\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/taskPageContent/taskList/TaskList.jsx"],"names":["React","useEffect","useDispatch","useSelector","styles","TaskListItem","getLoading","getVisibleTasks","fetchTasks","useParams","ChartModal","Loader","TaskList","taskDate","sprintId","tasks","isLoading","dispatch","length","emptyMessageBox","emptyMessage","taskList","map","item","taskCard","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SACEC,UADF,EAEEC,eAFF,QAGO,qCAHP;AAIA,SAASC,UAAT,QAA2B,sCAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAeL,SAAS,EAA9B;AACA,QAAMM,KAAK,GAAGZ,WAAW,CAACI,eAAD,CAAzB;AACA,QAAMS,SAAS,GAAGb,WAAW,CAACG,UAAD,CAA7B;AAEA,QAAMW,QAAQ,GAAGf,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACT,UAAU,CAACM,QAAD,CAAX,CAAR;AACD,GAFQ,EAEN,CAACG,QAAD,EAAWH,QAAX,CAFM,CAAT;AAGA,sBACE;AAAA,eACGE,SAAS,gBACR,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADQ,GAGR,CAACD,KAAK,CAACG,MAAP,iBACE;AAAK,MAAA,SAAS,EAAEd,MAAM,CAACe,eAAvB;AAAA,6BACE;AAAI,QAAA,SAAS,EAAEf,MAAM,CAACgB,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALN,EAYG,CAAC,CAACL,KAAK,CAACG,MAAR,iBACC;AAAI,MAAA,SAAS,EAAEd,MAAM,CAACiB,QAAtB;AAAA,gBACGN,KAAK,CAACO,GAAN,CAAUC,IAAI,iBACb;AAAmB,QAAA,SAAS,EAAEnB,MAAM,CAACoB,QAArC;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAED,IAApB;AAA0B,UAAA,QAAQ,EAAEV;AAApC;AAAA;AAAA;AAAA;AAAA;AADF,SAASU,IAAI,CAACE,GAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAbJ,eAqBE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA,kBADF;AAyBD,CAnCD;;GAAMb,Q;UACiBH,S,EACPN,W,EACIA,W,EAEDD,W;;;KALbU,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styles from './TaskList.module.css';\r\nimport TaskListItem from '../../../components/taskListItem/TaskListItem';\r\nimport {\r\n  getLoading,\r\n  getVisibleTasks,\r\n} from '../../../redux/tasks/task-selectors';\r\nimport { fetchTasks } from '../../../redux/tasks/task-operations';\r\nimport { useParams } from 'react-router-dom';\r\nimport ChartModal from '../../graph/modal/ChartModal';\r\nimport Loader from '../../loader/Loader';\r\n\r\nconst TaskList = ({ taskDate }) => {\r\n  const { sprintId } = useParams();\r\n  const tasks = useSelector(getVisibleTasks);\r\n  const isLoading = useSelector(getLoading);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasks(sprintId));\r\n  }, [dispatch, sprintId]);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        !tasks.length && (\r\n          <div className={styles.emptyMessageBox}>\r\n            <h2 className={styles.emptyMessage}>\r\n              Your task collection is empty, use the \"Create task\" button.\r\n            </h2>\r\n          </div>\r\n        )\r\n      )}\r\n      {!!tasks.length && (\r\n        <ul className={styles.taskList}>\r\n          {tasks.map(item => (\r\n            <li key={item._id} className={styles.taskCard}>\r\n              <TaskListItem item={item} taskDate={taskDate} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <ChartModal />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}