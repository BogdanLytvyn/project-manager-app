{"ast":null,"code":"import{createSelector}from'reselect';var getTasks=function getTasks(state){return state.tasks.tasks;};var getFilter=function getFilter(state){return state.tasks.filter;};var getCurrentDay=function getCurrentDay(state){return state.tasks.currentDay;};var getLoading=function getLoading(state){return state.tasks.loading;};var getVisibleTasks=createSelector([getTasks,getFilter],function(tasks,filter){var normalizedFilter=filter.toLowerCase();return tasks.filter(function(item){return item.title.toLowerCase().includes(normalizedFilter);});});export{getTasks,getFilter,getCurrentDay,getVisibleTasks,getLoading};","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/redux/tasks/task-selectors.js"],"names":["createSelector","getTasks","state","tasks","getFilter","filter","getCurrentDay","currentDay","getLoading","loading","getVisibleTasks","normalizedFilter","toLowerCase","item","title","includes"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYA,KAAhB,EAAtB,CACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAF,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYE,MAAhB,EAAvB,CACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAJ,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYI,UAAhB,EAA3B,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAN,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYM,OAAhB,EAAxB,CAGA,GAAMC,CAAAA,eAAe,CAAGV,cAAc,CACpC,CAACC,QAAD,CAAWG,SAAX,CADoC,CAEpC,SAACD,KAAD,CAAQE,MAAR,CAAmB,CACjB,GAAMM,CAAAA,gBAAgB,CAAGN,MAAM,CAACO,WAAP,EAAzB,CACA,MAAOT,CAAAA,KAAK,CAACE,MAAN,CAAa,SAAAQ,IAAI,QACtBA,CAAAA,IAAI,CAACC,KAAL,CAAWF,WAAX,GAAyBG,QAAzB,CAAkCJ,gBAAlC,CADsB,EAAjB,CAAP,CAGD,CAPmC,CAAtC,CAUA,OAASV,QAAT,CAAmBG,SAAnB,CAA8BE,aAA9B,CAA6CI,eAA7C,CAA8DF,UAA9D","sourcesContent":["import { createSelector } from 'reselect';\n\nconst getTasks = state => state.tasks.tasks;\nconst getFilter = state => state.tasks.filter;\nconst getCurrentDay = state => state.tasks.currentDay;\nconst getLoading = state => state.tasks.loading;\n\n\nconst getVisibleTasks = createSelector(\n  [getTasks, getFilter],\n  (tasks, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return tasks.filter(item =>\n      item.title.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport { getTasks, getFilter, getCurrentDay, getVisibleTasks, getLoading };\n"]},"metadata":{},"sourceType":"module"}