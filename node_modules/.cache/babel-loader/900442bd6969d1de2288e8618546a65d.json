{"ast":null,"code":"import React from'react';import styles from'./TaskForm.module.css';import{Formik,Form,Field,ErrorMessage}from'formik';import*as Yup from'yup';import{useDispatch}from'react-redux';import{createTask}from'../../redux/tasks/task-operations';import Button from'../../shared/button/Button';import{useParams}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var formSchema=Yup.object().shape({title:Yup.string().required('Task name is a required field'),hoursPlanned:Yup.number('Planned hours must be a number').lessThan(9,'Must be less or iqual to 8h').required('Planned hours  is a required field').positive('Planned hours  must be a positive number').integer('Planned hours  must be an integer')});var TaskForm=function TaskForm(_ref){var onClose=_ref.onClose;var _useParams=useParams(),sprintId=_useParams.sprintId;var dispatch=useDispatch();return/*#__PURE__*/_jsxs(\"div\",{className:styles.formContainer,children:[/*#__PURE__*/_jsx(\"h2\",{className:styles.titleForm,children:\"Create new task\"}),/*#__PURE__*/_jsx(Formik,{initialValues:{title:'',hoursPlanned:''},validationSchema:formSchema,onSubmit:function onSubmit(values){createTask(values,sprintId);dispatch(createTask(values,sprintId));onClose();},children:/*#__PURE__*/_jsxs(Form,{className:styles.form,children:[/*#__PURE__*/_jsx(Field,{className:styles.inputName,name:\"title\",type:\"text\",placeholder:\"Task name\"}),/*#__PURE__*/_jsx(ErrorMessage,{className:styles.errorName,component:\"span\",name:\"title\"}),/*#__PURE__*/_jsx(Field,{className:styles.inputTime,name:\"hoursPlanned\",type:\"number\",placeholder:\"Planned hours \"}),/*#__PURE__*/_jsx(ErrorMessage,{className:styles.errorTime,component:\"span\",name:\"hoursPlanned\"}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Done\"})]})})]});};export default TaskForm;","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/taskForm/TaskForm.jsx"],"names":["React","styles","Formik","Form","Field","ErrorMessage","Yup","useDispatch","createTask","Button","useParams","formSchema","object","shape","title","string","required","hoursPlanned","number","lessThan","positive","integer","TaskForm","onClose","sprintId","dispatch","formContainer","titleForm","values","form","inputName","errorName","inputTime","errorTime"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,KAAvB,CAA8BC,YAA9B,KAAkD,QAAlD,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,UAAT,KAA2B,mCAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CACA,OAASC,SAAT,KAA0B,kBAA1B,C,wFAEA,GAAMC,CAAAA,UAAU,CAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB,CACpCC,KAAK,CAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb,CAAsB,+BAAtB,CAD6B,CAEpCC,YAAY,CAAEX,GAAG,CAACY,MAAJ,CAAW,gCAAX,EACXC,QADW,CACF,CADE,CACC,6BADD,EAEXH,QAFW,CAEF,oCAFE,EAGXI,QAHW,CAGF,0CAHE,EAIXC,OAJW,CAIH,mCAJG,CAFsB,CAAnB,CAAnB,CASA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,gBACXb,SAAS,EADE,CACxBc,QADwB,YACxBA,QADwB,CAEhC,GAAMC,CAAAA,QAAQ,CAAGlB,WAAW,EAA5B,CAEA,mBACE,aAAK,SAAS,CAAEN,MAAM,CAACyB,aAAvB,wBACE,WAAI,SAAS,CAAEzB,MAAM,CAAC0B,SAAtB,6BADF,cAEE,KAAC,MAAD,EACE,aAAa,CAAE,CACbb,KAAK,CAAE,EADM,CAEbG,YAAY,CAAE,EAFD,CADjB,CAKE,gBAAgB,CAAEN,UALpB,CAME,QAAQ,CAAE,kBAAAiB,MAAM,CAAI,CAClBpB,UAAU,CAACoB,MAAD,CAASJ,QAAT,CAAV,CACAC,QAAQ,CAACjB,UAAU,CAACoB,MAAD,CAASJ,QAAT,CAAX,CAAR,CACAD,OAAO,GACR,CAVH,uBAYE,MAAC,IAAD,EAAM,SAAS,CAAEtB,MAAM,CAAC4B,IAAxB,wBACE,KAAC,KAAD,EACE,SAAS,CAAE5B,MAAM,CAAC6B,SADpB,CAEE,IAAI,CAAC,OAFP,CAGE,IAAI,CAAC,MAHP,CAIE,WAAW,CAAC,WAJd,EADF,cAOE,KAAC,YAAD,EACE,SAAS,CAAE7B,MAAM,CAAC8B,SADpB,CAEE,SAAS,CAAC,MAFZ,CAGE,IAAI,CAAC,OAHP,EAPF,cAaE,KAAC,KAAD,EACE,SAAS,CAAE9B,MAAM,CAAC+B,SADpB,CAEE,IAAI,CAAC,cAFP,CAGE,IAAI,CAAC,QAHP,CAIE,WAAW,CAAC,gBAJd,EAbF,cAoBE,KAAC,YAAD,EACE,SAAS,CAAE/B,MAAM,CAACgC,SADpB,CAEE,SAAS,CAAC,MAFZ,CAGE,IAAI,CAAC,cAHP,EApBF,cAyBE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,kBAzBF,GAZF,EAFF,GADF,CA6CD,CAjDD,CAmDA,cAAeX,CAAAA,QAAf","sourcesContent":["import React from 'react';\nimport styles from './TaskForm.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { createTask } from '../../redux/tasks/task-operations';\nimport Button from '../../shared/button/Button';\nimport { useParams } from 'react-router-dom';\n\nconst formSchema = Yup.object().shape({\n  title: Yup.string().required('Task name is a required field'),\n  hoursPlanned: Yup.number('Planned hours must be a number')\n    .lessThan(9, 'Must be less or iqual to 8h')\n    .required('Planned hours  is a required field')\n    .positive('Planned hours  must be a positive number')\n    .integer('Planned hours  must be an integer'),\n});\n\nconst TaskForm = ({ onClose }) => {\n  const { sprintId } = useParams();\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.formContainer}>\n      <h2 className={styles.titleForm}>Create new task</h2>\n      <Formik\n        initialValues={{\n          title: '',\n          hoursPlanned: '',\n        }}\n        validationSchema={formSchema}\n        onSubmit={values => {\n          createTask(values, sprintId);\n          dispatch(createTask(values, sprintId));\n          onClose();\n        }}\n      >\n        <Form className={styles.form}>\n          <Field\n            className={styles.inputName}\n            name=\"title\"\n            type=\"text\"\n            placeholder=\"Task name\"\n          />\n          <ErrorMessage\n            className={styles.errorName}\n            component=\"span\"\n            name=\"title\"\n          />\n\n          <Field\n            className={styles.inputTime}\n            name=\"hoursPlanned\"\n            type=\"number\"\n            placeholder=\"Planned hours \"\n          />\n\n          <ErrorMessage\n            className={styles.errorTime}\n            component=\"span\"\n            name=\"hoursPlanned\"\n          />\n          <Button type=\"submit\">Done</Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}