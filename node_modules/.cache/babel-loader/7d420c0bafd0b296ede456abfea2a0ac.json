{"ast":null,"code":"var _jsxFileName = \"/home/bogdan/project-manager-app/src/components/createSprintForm/CreateSprintForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport './datepicker.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport Button from '../../shared/button/Button';\nimport { addSprint } from '../../redux/sprints/sprints-operations';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport styles from './CreateSprintForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formSchema = Yup.object().shape({\n  title: Yup.string().min(3, 'Too short!').required('* Sprint name is a required field'),\n  duration: Yup.number().typeError('* Duration has to be a number').required('* Duration is a required field').positive('* Duration must be a positive number').integer('* Duration must be an integer')\n});\n\nconst CreateSprintForm = ({\n  onClose\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  const [startDate, setStartDate] = useState(new Date());\n  const [check, setCheck] = useState(false);\n  const minDate = check ? '' : new Date();\n\n  const onHandleSubmit = (title, endDate, duration) => {\n    addSprint(title, endDate, duration);\n    dispatch(addSprint({\n      title,\n      endDate,\n      duration\n    }, params.projectId));\n  };\n\n  const onCheck = event => {\n    setCheck(prev => !prev);\n  };\n\n  const startToEndDay = (inputDay, inputDuration) => {\n    const dateToBackend = new Date(inputDay);\n    dateToBackend.setDate(dateToBackend.getDate() + Number(inputDuration) - 1);\n    return dateToBackend;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.titleForm,\n      children: \"Create a sprint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: '',\n        duration: ''\n      },\n      validationSchema: formSchema,\n      onSubmit: async values => {\n        const {\n          title,\n          duration\n        } = values;\n        const toBackEnd = startToEndDay(startDate, duration);\n        const endDate = `${toBackEnd.getFullYear()}-${1 + toBackEnd.getMonth()}-${toBackEnd.getDate()}`;\n        onHandleSubmit(title, endDate, duration);\n        onClose();\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          className: styles.inputName,\n          name: \"title\",\n          type: \"text\",\n          placeholder: \"The name of the sprint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: styles.errorName,\n          component: \"span\",\n          name: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: styles.checkbox,\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"checkbox\",\n            name: \"pastDays\",\n            checked: check,\n            onClick: onCheck,\n            placeholder: \"Includes past days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.checkbox__text,\n            children: \"Include previous days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.tabletContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"picker\",\n              className: styles.dataPickerContainer,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.dataPickerLabel,\n                children: \"Start date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              className: styles.dataPicker,\n              selected: startDate,\n              onChange: date => setStartDate(date),\n              minDate: minDate,\n              id: \"picker\",\n              dateFormat: \"MMMM dd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.formDuration,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              className: styles.inputTime,\n              name: \"duration\",\n              type: \"text\",\n              placeholder: \"Duration (days)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              className: styles.errorTime,\n              component: \"span\",\n              name: \"duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateSprintForm, \"L5pWmOTlRyI+PJqAf8wGmeSlA7w=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = CreateSprintForm;\nexport default CreateSprintForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateSprintForm\");","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/createSprintForm/CreateSprintForm.jsx"],"names":["React","useState","DatePicker","Formik","Form","Field","ErrorMessage","Yup","Button","addSprint","useDispatch","useParams","styles","formSchema","object","shape","title","string","min","required","duration","number","typeError","positive","integer","CreateSprintForm","onClose","dispatch","params","startDate","setStartDate","Date","check","setCheck","minDate","onHandleSubmit","endDate","projectId","onCheck","event","prev","startToEndDay","inputDay","inputDuration","dateToBackend","setDate","getDate","Number","formContainer","titleForm","values","toBackEnd","getFullYear","getMonth","form","inputName","errorName","checkbox","checkbox__text","tabletContainer","dataPickerContainer","dataPickerLabel","dataPicker","date","formDuration","inputTime","errorTime"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport './datepicker.css';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Button from '../../shared/button/Button';\r\nimport { addSprint } from '../../redux/sprints/sprints-operations';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport styles from './CreateSprintForm.module.css';\r\n\r\nconst formSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(3, 'Too short!')\r\n    .required('* Sprint name is a required field'),\r\n  duration: Yup.number()\r\n    .typeError('* Duration has to be a number')\r\n    .required('* Duration is a required field')\r\n    .positive('* Duration must be a positive number')\r\n    .integer('* Duration must be an integer'),\r\n});\r\n\r\nconst CreateSprintForm = ({ onClose }) => {\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [check, setCheck] = useState(false);\r\n\r\n  const minDate = check ? '' : new Date();\r\n\r\n  const onHandleSubmit = (title, endDate, duration) => {\r\n    addSprint(title, endDate, duration);\r\n    dispatch(addSprint({ title, endDate, duration }, params.projectId));\r\n  };\r\n\r\n  const onCheck = event => {\r\n    setCheck(prev => !prev);\r\n  };\r\n\r\n  const startToEndDay = (inputDay, inputDuration) => {\r\n    const dateToBackend = new Date(inputDay);\r\n    dateToBackend.setDate(dateToBackend.getDate() + Number(inputDuration) - 1);\r\n\r\n    return dateToBackend;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.formContainer}>\r\n      <h2 className={styles.titleForm}>Create a sprint</h2>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          title: '',\r\n          duration: '',\r\n        }}\r\n        validationSchema={formSchema}\r\n        onSubmit={async values => {\r\n          const { title, duration } = values;\r\n          const toBackEnd = startToEndDay(startDate, duration);\r\n\r\n          const endDate = `${toBackEnd.getFullYear()}-${\r\n            1 + toBackEnd.getMonth()\r\n          }-${toBackEnd.getDate()}`;\r\n          onHandleSubmit(title, endDate, duration);\r\n          onClose();\r\n        }}\r\n      >\r\n        <Form className={styles.form}>\r\n          <Field\r\n            className={styles.inputName}\r\n            name=\"title\"\r\n            type=\"text\"\r\n            placeholder=\"The name of the sprint\"\r\n          />\r\n          <ErrorMessage\r\n            className={styles.errorName}\r\n            component=\"span\"\r\n            name=\"title\"\r\n          />\r\n          <label className={styles.checkbox}>\r\n            <Field\r\n              type=\"checkbox\"\r\n              name=\"pastDays\"\r\n              checked={check}\r\n              onClick={onCheck}\r\n              placeholder=\"Includes past days\"\r\n            />\r\n            <div className={styles.checkbox__text}>Include previous days</div>\r\n          </label>\r\n          <div className={styles.tabletContainer}>\r\n            <div>\r\n              <label htmlFor=\"picker\" className={styles.dataPickerContainer}>\r\n                <span className={styles.dataPickerLabel}>Start date</span>\r\n              </label>\r\n\r\n              <DatePicker\r\n                className={styles.dataPicker}\r\n                selected={startDate}\r\n                onChange={date => setStartDate(date)}\r\n                minDate={minDate}\r\n                id=\"picker\"\r\n                dateFormat=\"MMMM dd\"\r\n              />\r\n            </div>\r\n\r\n            <div className={styles.formDuration}>\r\n              <Field\r\n                className={styles.inputTime}\r\n                name=\"duration\"\r\n                type=\"text\"\r\n                placeholder=\"Duration (days)\"\r\n              />\r\n\r\n              <ErrorMessage\r\n                className={styles.errorTime}\r\n                component=\"span\"\r\n                name=\"duration\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <Button>Done</Button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateSprintForm;\r\n"]},"metadata":{},"sourceType":"module"}