{"ast":null,"code":"var _jsxFileName = \"/home/bogdan/project-manager-app/src/components/taskForm/TaskForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from './TaskForm.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { createTask } from '../../redux/tasks/task-operations';\nimport Button from '../../shared/button/Button';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formSchema = Yup.object().shape({\n  title: Yup.string().required('Task name is a required field'),\n  hoursPlanned: Yup.number('Planned hours must be a number').lessThan(9, 'Must be less or iqual to 8h').required('Planned hours  is a required field').positive('Planned hours  must be a positive number').integer('Planned hours  must be an integer')\n});\n\nconst TaskForm = ({\n  onClose\n}) => {\n  _s();\n\n  const {\n    sprintId\n  } = useParams();\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.titleForm,\n      children: \"Create new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: '',\n        hoursPlanned: ''\n      },\n      validationSchema: formSchema,\n      onSubmit: values => {\n        createTask(values, sprintId);\n        dispatch(createTask(values, sprintId));\n        onClose();\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          className: styles.inputName,\n          name: \"title\",\n          type: \"text\",\n          placeholder: \"Task name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: styles.errorName,\n          component: \"span\",\n          name: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          className: styles.inputTime,\n          name: \"hoursPlanned\",\n          type: \"number\",\n          placeholder: \"Planned hours \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: styles.errorTime,\n          component: \"span\",\n          name: \"hoursPlanned\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskForm, \"OQ86z39dL2zYIw7kXxkyMaME7lk=\", false, function () {\n  return [useParams, useDispatch];\n});\n\n_c = TaskForm;\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/taskForm/TaskForm.jsx"],"names":["React","styles","Formik","Form","Field","ErrorMessage","Yup","useDispatch","createTask","Button","useParams","formSchema","object","shape","title","string","required","hoursPlanned","number","lessThan","positive","integer","TaskForm","onClose","sprintId","dispatch","formContainer","titleForm","values","form","inputName","errorName","inputTime","errorTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './TaskForm.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { createTask } from '../../redux/tasks/task-operations';\nimport Button from '../../shared/button/Button';\nimport { useParams } from 'react-router-dom';\n\nconst formSchema = Yup.object().shape({\n  title: Yup.string().required('Task name is a required field'),\n  hoursPlanned: Yup.number('Planned hours must be a number')\n    .lessThan(9, 'Must be less or iqual to 8h')\n    .required('Planned hours  is a required field')\n    .positive('Planned hours  must be a positive number')\n    .integer('Planned hours  must be an integer'),\n});\n\nconst TaskForm = ({ onClose }) => {\n  const { sprintId } = useParams();\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.formContainer}>\n      <h2 className={styles.titleForm}>Create new task</h2>\n      <Formik\n        initialValues={{\n          title: '',\n          hoursPlanned: '',\n        }}\n        validationSchema={formSchema}\n        onSubmit={values => {\n          createTask(values, sprintId);\n          dispatch(createTask(values, sprintId));\n          onClose();\n        }}\n      >\n        <Form className={styles.form}>\n          <Field\n            className={styles.inputName}\n            name=\"title\"\n            type=\"text\"\n            placeholder=\"Task name\"\n          />\n          <ErrorMessage\n            className={styles.errorName}\n            component=\"span\"\n            name=\"title\"\n          />\n\n          <Field\n            className={styles.inputTime}\n            name=\"hoursPlanned\"\n            type=\"number\"\n            placeholder=\"Planned hours \"\n          />\n\n          <ErrorMessage\n            className={styles.errorTime}\n            component=\"span\"\n            name=\"hoursPlanned\"\n          />\n          <Button type=\"submit\">Done</Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}