{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { fetchTaskRequest, fetchTaskSuccess, fetchTaskError, createTaskRequest, createTaskSuccess, createTaskError, deleteTaskRequest, deleteTaskSuccess, deleteTaskError, changeTaskRequest, changeTaskSuccess, changeTaskError, changeFilter, changeCurrentDay } from './task-actions.js';\nconst tasks = createReducer([], {\n  [fetchTaskSuccess]: (_, {\n    payload\n  }) => payload,\n  [createTaskSuccess]: (state, {\n    payload\n  }) => [...state, payload],\n  [deleteTaskSuccess]: (state, {\n    payload\n  }) => [...state.filter(item => item._id !== payload)],\n  [changeTaskSuccess]: (state, {\n    payload\n  }) => [...state.map(task => task._id === payload.taskId ? { ...task,\n    hoursWasted: payload.hoursWasted,\n    hoursWastedPerDay: [...task.hoursWastedPerDay.map(item => item.currentDay === payload.currentDay ? { ...item,\n      singleHoursWasted: payload.singleHoursWasted\n    } : item)]\n  } : task)]\n});\nconst loading = createReducer(false, {\n  [fetchTaskRequest]: () => true,\n  [fetchTaskSuccess]: () => false,\n  [fetchTaskError]: () => false,\n  [createTaskRequest]: () => true,\n  [createTaskSuccess]: () => false,\n  [createTaskError]: () => false,\n  [deleteTaskRequest]: () => true,\n  [deleteTaskSuccess]: () => false,\n  [deleteTaskError]: () => false,\n  [changeTaskRequest]: () => true,\n  [changeTaskSuccess]: () => false,\n  [changeTaskError]: () => false\n});\nconst filter = createReducer('', {\n  [changeFilter]: (_, {\n    payload\n  }) => payload\n});\nconst currentDay = createReducer(Date.now(), {\n  [changeCurrentDay]: (_, {\n    payload\n  }) => payload\n});\n\nconst handleError = (_, {\n  payload\n}) => {\n  var _payload$response;\n\n  return payload === null || payload === void 0 ? void 0 : (_payload$response = payload.response) === null || _payload$response === void 0 ? void 0 : _payload$response.data;\n};\n\nconst clearError = () => null;\n\nconst error = createReducer(null, {\n  [fetchTaskRequest]: clearError,\n  [fetchTaskError]: handleError,\n  [createTaskRequest]: clearError,\n  [createTaskError]: handleError,\n  [deleteTaskRequest]: clearError,\n  [deleteTaskError]: handleError,\n  [changeTaskRequest]: clearError,\n  [changeTaskError]: handleError\n}); // const error = createReducer(null, {});\n\nexport default combineReducers({\n  tasks,\n  filter,\n  currentDay,\n  loading,\n  error\n});","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/redux/tasks/task-reducers.js"],"names":["combineReducers","createReducer","fetchTaskRequest","fetchTaskSuccess","fetchTaskError","createTaskRequest","createTaskSuccess","createTaskError","deleteTaskRequest","deleteTaskSuccess","deleteTaskError","changeTaskRequest","changeTaskSuccess","changeTaskError","changeFilter","changeCurrentDay","tasks","_","payload","state","filter","item","_id","map","task","taskId","hoursWasted","hoursWastedPerDay","currentDay","singleHoursWasted","loading","Date","now","handleError","response","data","clearError","error"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchTaskRequest,\n  fetchTaskSuccess,\n  fetchTaskError,\n  createTaskRequest,\n  createTaskSuccess,\n  createTaskError,\n  deleteTaskRequest,\n  deleteTaskSuccess,\n  deleteTaskError,\n  changeTaskRequest,\n  changeTaskSuccess,\n  changeTaskError,\n  changeFilter,\n  changeCurrentDay,\n} from './task-actions.js';\n\nconst tasks = createReducer([], {\n  [fetchTaskSuccess]: (_, { payload }) => payload,\n  [createTaskSuccess]: (state, { payload }) => [...state, payload],\n  [deleteTaskSuccess]: (state, { payload }) => [\n    ...state.filter(item => item._id !== payload),\n  ],\n\n  [changeTaskSuccess]: (state, { payload }) => [\n    ...state.map(task =>\n      task._id === payload.taskId\n        ? {\n            ...task,\n            hoursWasted: payload.hoursWasted,\n            hoursWastedPerDay: [\n              ...task.hoursWastedPerDay.map(item =>\n                item.currentDay === payload.currentDay\n                  ? { ...item, singleHoursWasted: payload.singleHoursWasted }\n                  : item,\n              ),\n            ],\n          }\n        : task,\n    ),\n  ],\n});\n\nconst loading = createReducer(false, {\n  [fetchTaskRequest]: () => true,\n  [fetchTaskSuccess]: () => false,\n  [fetchTaskError]: () => false,\n  [createTaskRequest]: () => true,\n  [createTaskSuccess]: () => false,\n  [createTaskError]: () => false,\n  [deleteTaskRequest]: () => true,\n  [deleteTaskSuccess]: () => false,\n  [deleteTaskError]: () => false,\n  [changeTaskRequest]: () => true,\n  [changeTaskSuccess]: () => false,\n  [changeTaskError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst currentDay = createReducer(Date.now(), {\n  [changeCurrentDay]: (_, { payload }) => payload,\n});\n\nconst handleError = (_, { payload }) => payload?.response?.data;\nconst clearError = () => null;\n\nconst error = createReducer(null, {\n  [fetchTaskRequest]: clearError,\n  [fetchTaskError]: handleError,\n  [createTaskRequest]: clearError,\n  [createTaskError]: handleError,\n  [deleteTaskRequest]: clearError,\n  [deleteTaskError]: handleError,\n  [changeTaskRequest]: clearError,\n  [changeTaskError]: handleError,\n});\n\n// const error = createReducer(null, {});\n\nexport default combineReducers({\n  tasks,\n  filter,\n  currentDay,\n  loading,\n  error,\n});\n"]},"metadata":{},"sourceType":"module"}