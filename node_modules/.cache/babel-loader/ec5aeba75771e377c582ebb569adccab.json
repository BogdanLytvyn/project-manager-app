{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { registerSuccess, registerError, loginSuccess, loginError, logoutSuccess, logoutError, refreshSuccess, refreshError, registerRequest, loginRequest, logoutRequest } from './auth-actions'; // const initialUserState = { email: null, password: null };\n// const user = createReducer(initialUserState, {\n//   [registerSuccess]: (_, { payload }) => payload.user,\n//   [loginSuccess]: (_, { payload }) => payload,\n//   [refreshSuccess]: (_, { payload }) => payload,\n//   [logoutSuccess]: () => null,\n//   [refreshError]: () => initialUserState,\n// });\n\nconst token = createReducer(null, {\n  [registerSuccess]: (_, {\n    payload\n  }) => payload,\n  [loginSuccess]: (_, {\n    payload\n  }) => payload,\n  [refreshSuccess]: (_, {\n    payload\n  }) => payload,\n  [logoutSuccess]: () => null,\n  [refreshError]: () => null\n});\n\nconst setError = (_, {\n  payload\n}) => {\n  var _payload$response;\n\n  return payload === null || payload === void 0 ? void 0 : (_payload$response = payload.response) === null || _payload$response === void 0 ? void 0 : _payload$response.data;\n};\n\nconst clearError = () => null;\n\nconst error = createReducer(null, {\n  [registerRequest]: clearError,\n  [registerError]: setError,\n  [loginRequest]: clearError,\n  [loginError]: setError,\n  [refreshError]: setError,\n  [logoutRequest]: clearError,\n  [logoutError]: setError,\n  [refreshError]: setError\n});\nexport default combineReducers({\n  token,\n  error // user,\n\n});","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/redux/auth/auth-reducers.js"],"names":["combineReducers","createReducer","registerSuccess","registerError","loginSuccess","loginError","logoutSuccess","logoutError","refreshSuccess","refreshError","registerRequest","loginRequest","logoutRequest","token","_","payload","setError","response","data","clearError","error"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,WANF,EAOEC,cAPF,EAQEC,YARF,EASEC,eATF,EAUEC,YAVF,EAWEC,aAXF,QAYO,gBAZP,C,CAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGZ,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,eAAD,GAAmB,CAACY,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OADP;AAEhC,GAACX,YAAD,GAAgB,CAACU,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAFJ;AAGhC,GAACP,cAAD,GAAkB,CAACM,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAHN;AAIhC,GAACT,aAAD,GAAiB,MAAM,IAJS;AAKhC,GAACG,YAAD,GAAgB,MAAM;AALU,CAAP,CAA3B;;AAQA,MAAMO,QAAQ,GAAG,CAACF,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ;AAAA;;AAAA,SAAoBA,OAApB,aAAoBA,OAApB,4CAAoBA,OAAO,CAAEE,QAA7B,sDAAoB,kBAAmBC,IAAvC;AAAA,CAAjB;;AACA,MAAMC,UAAU,GAAG,MAAM,IAAzB;;AAEA,MAAMC,KAAK,GAAGnB,aAAa,CAAC,IAAD,EAAO;AAChC,GAACS,eAAD,GAAmBS,UADa;AAEhC,GAAChB,aAAD,GAAiBa,QAFe;AAGhC,GAACL,YAAD,GAAgBQ,UAHgB;AAIhC,GAACd,UAAD,GAAcW,QAJkB;AAKhC,GAACP,YAAD,GAAgBO,QALgB;AAMhC,GAACJ,aAAD,GAAiBO,UANe;AAOhC,GAACZ,WAAD,GAAeS,QAPiB;AAQhC,GAACP,YAAD,GAAgBO;AARgB,CAAP,CAA3B;AAWA,eAAehB,eAAe,CAAC;AAC7Ba,EAAAA,KAD6B;AAE7BO,EAAAA,KAF6B,CAG7B;;AAH6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  registerSuccess,\n  registerError,\n  loginSuccess,\n  loginError,\n  logoutSuccess,\n  logoutError,\n  refreshSuccess,\n  refreshError,\n  registerRequest,\n  loginRequest,\n  logoutRequest,\n} from './auth-actions';\n\n// const initialUserState = { email: null, password: null };\n\n// const user = createReducer(initialUserState, {\n//   [registerSuccess]: (_, { payload }) => payload.user,\n//   [loginSuccess]: (_, { payload }) => payload,\n//   [refreshSuccess]: (_, { payload }) => payload,\n//   [logoutSuccess]: () => null,\n//   [refreshError]: () => initialUserState,\n// });\n\nconst token = createReducer(null, {\n  [registerSuccess]: (_, { payload }) => payload,\n  [loginSuccess]: (_, { payload }) => payload,\n  [refreshSuccess]: (_, { payload }) => payload,\n  [logoutSuccess]: () => null,\n  [refreshError]: () => null,\n});\n\nconst setError = (_, { payload }) => payload?.response?.data;\nconst clearError = () => null;\n\nconst error = createReducer(null, {\n  [registerRequest]: clearError,\n  [registerError]: setError,\n  [loginRequest]: clearError,\n  [loginError]: setError,\n  [refreshError]: setError,\n  [logoutRequest]: clearError,\n  [logoutError]: setError,\n  [refreshError]: setError,\n});\n\nexport default combineReducers({\n  token,\n  error,\n  // user,\n});\n"]},"metadata":{},"sourceType":"module"}