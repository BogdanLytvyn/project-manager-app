{"ast":null,"code":"var _jsxFileName = \"/home/bogdan/project-manager-app/src/components/addMember/AddMember.jsx\",\n    _s = $RefreshSig$();\n\nimport MembersList from '../membersList/MembersList';\nimport styles from './AddMember.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { addMember } from '../../redux/projects/projects-operations';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProjectsSelector } from '../../redux/projects/projects-selectors';\nimport Button from '../../shared/button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formSchema = Yup.object().shape({\n  email: Yup.string().required('* Email is a required field').email('* Email must be valid')\n});\n\nconst AddMember = () => {\n  _s();\n\n  const {\n    projectId\n  } = useParams();\n  const dispatch = useDispatch();\n  const projects = useSelector(getProjectsSelector);\n  const members = projects.find(item => item._id === projectId).members;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.formContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.titleForm,\n        children: \"Add new project member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: ''\n        },\n        validationSchema: formSchema,\n        onSubmit: async (values, {\n          resetForm\n        }) => {\n          addMember(values);\n          dispatch(addMember(values, projectId));\n          resetForm({});\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: styles.memberForm,\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            className: styles.input,\n            name: \"email\",\n            type: \"text\",\n            placeholder: \"E-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            className: styles.error,\n            component: \"span\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MembersList, {\n            members: members\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"form\",\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddMember, \"JWUxcMen5bGL8lLcy+kbVUjecbE=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = AddMember;\nexport default AddMember;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMember\");","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/addMember/AddMember.jsx"],"names":["MembersList","styles","Formik","Form","Field","ErrorMessage","Yup","addMember","useParams","useDispatch","useSelector","getProjectsSelector","Button","formSchema","object","shape","email","string","required","AddMember","projectId","dispatch","projects","members","find","item","_id","formContainer","titleForm","values","resetForm","memberForm","input","error"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,0CAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,yCAApC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;AAEA,MAAMC,UAAU,GAAGP,GAAG,CAACQ,MAAJ,GAAaC,KAAb,CAAmB;AACpCC,EAAAA,KAAK,EAAEV,GAAG,CAACW,MAAJ,GACJC,QADI,CACK,6BADL,EAEJF,KAFI,CAEE,uBAFF;AAD6B,CAAnB,CAAnB;;AAMA,MAAMG,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAgBZ,SAAS,EAA/B;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,QAAQ,GAAGZ,WAAW,CAACC,mBAAD,CAA5B;AACA,QAAMY,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,SAAnC,EAA8CG,OAA9D;AAEA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEtB,MAAM,CAAC0B,aAAvB;AAAA,8BACE;AAAI,QAAA,SAAS,EAAE1B,MAAM,CAAC2B,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AACE,QAAA,aAAa,EAAE;AAAEZ,UAAAA,KAAK,EAAE;AAAT,SADjB;AAEE,QAAA,gBAAgB,EAAEH,UAFpB;AAGE,QAAA,QAAQ,EAAE,OAAOgB,MAAP,EAAe;AAAEC,UAAAA;AAAF,SAAf,KAAiC;AACzCvB,UAAAA,SAAS,CAACsB,MAAD,CAAT;AACAR,UAAAA,QAAQ,CAACd,SAAS,CAACsB,MAAD,EAAST,SAAT,CAAV,CAAR;AACAU,UAAAA,SAAS,CAAC,EAAD,CAAT;AACD,SAPH;AAAA,+BASE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAE7B,MAAM,CAAC8B,UAAxB;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,SAAS,EAAE9B,MAAM,CAAC+B,KADpB;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,YAAD;AACE,YAAA,SAAS,EAAE/B,MAAM,CAACgC,KADpB;AAEE,YAAA,SAAS,EAAC,MAFZ;AAGE,YAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,kBARF,eAaE,QAAC,WAAD;AAAa,YAAA,OAAO,EAAEV;AAAtB;AAAA;AAAA;AAAA;AAAA,kBAbF,eAcE,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CAvCD;;GAAMJ,S;UACkBX,S,EACLC,W,EACAC,W;;;KAHbS,S;AAyCN,eAAeA,SAAf","sourcesContent":["import MembersList from '../membersList/MembersList';\nimport styles from './AddMember.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { addMember } from '../../redux/projects/projects-operations';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProjectsSelector } from '../../redux/projects/projects-selectors';\nimport Button from '../../shared/button/Button';\n\nconst formSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('* Email is a required field')\n    .email('* Email must be valid'),\n});\n\nconst AddMember = () => {\n  const { projectId } = useParams();\n  const dispatch = useDispatch();\n  const projects = useSelector(getProjectsSelector);\n  const members = projects.find(item => item._id === projectId).members;\n\n  return (\n    <div>\n      <div className={styles.formContainer}>\n        <h2 className={styles.titleForm}>Add new project member</h2>\n        <Formik\n          initialValues={{ email: '' }}\n          validationSchema={formSchema}\n          onSubmit={async (values, { resetForm }) => {\n            addMember(values);\n            dispatch(addMember(values, projectId));\n            resetForm({});\n          }}\n        >\n          <Form className={styles.memberForm}>\n            <Field\n              className={styles.input}\n              name=\"email\"\n              type=\"text\"\n              placeholder=\"E-mail\"\n            />\n\n            <ErrorMessage\n              className={styles.error}\n              component=\"span\"\n              name=\"email\"\n            />\n            <MembersList members={members} />\n            <Button id=\"form\">Done</Button>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default AddMember;\n"]},"metadata":{},"sourceType":"module"}