{"ast":null,"code":"var _jsxFileName = \"/home/bogdan/project-manager-app/src/components/taskPageContent/taskHeader/TaskHeader.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './TaskHeader.module.css';\nimport MainModal from '../../../shared/mainModal/MainModal';\nimport TaskForm from '../../taskForm/TaskForm';\nimport ChangeTitle from '../../titleEditor/TitleEditor';\nimport RoundButton from '../../../shared/roundButton/RoundButton';\nimport TaskFilter from '../taskFilter/TaskFilter';\nimport { useSelector } from 'react-redux';\nimport { getSprintsSelector } from '../../../redux/sprints/sprints-selectors';\nimport { useParams } from 'react-router-dom';\nimport { getCurrentDay } from '../../../redux/tasks/task-selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SprintHeader({\n  setTaskDate\n}) {\n  _s();\n\n  var _sprints$find, _sprints$find2, _sprints$find3;\n\n  const [showModal, setShowModal] = useState(false);\n  const sprints = useSelector(getSprintsSelector);\n  const {\n    sprintId\n  } = useParams();\n  const startDate = (_sprints$find = sprints.find(item => item._id === sprintId)) === null || _sprints$find === void 0 ? void 0 : _sprints$find.startDate;\n  const duration = (_sprints$find2 = sprints.find(item => item._id === sprintId)) === null || _sprints$find2 === void 0 ? void 0 : _sprints$find2.duration;\n  const endDate = (_sprints$find3 = sprints.find(item => item._id === sprintId)) === null || _sprints$find3 === void 0 ? void 0 : _sprints$find3.endDate;\n\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n  const [currentDay, setCurrentDay] = useState(Date.now());\n  const [sprintDay, setSprintDay] = useState(0);\n  const curDay = useSelector(getCurrentDay);\n  useEffect(() => {\n    const result = (Date.now() - Date.parse(startDate)) / _MS_PER_DAY;\n\n    setSprintDay(Math.floor(result + 1));\n  }, [startDate, _MS_PER_DAY, sprintId]);\n  useEffect(() => {\n    setCurrentDay(curDay);\n  }, [sprintId, curDay]);\n  useEffect(() => {\n    setTaskDate(currentDay);\n  }, [sprintDay, setTaskDate, currentDay]);\n  useEffect(() => {\n    const body = document.querySelector('body');\n    body.style.overflow = showModal ? 'hidden' : 'auto';\n  }, [showModal]);\n\n  const onDecrement = () => {\n    setCurrentDay(prev => prev - _MS_PER_DAY);\n    setSprintDay(prev => prev - 1);\n  };\n\n  const onIncrement = () => {\n    setCurrentDay(prev => prev + _MS_PER_DAY);\n    setSprintDay(prev => prev + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.sprintHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.controlAndSearchBlock,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.controlPanel,\n          children: [!!sprintDay && !!duration && Date.parse(startDate) <= currentDay && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.switch,\n            children: [new Date(startDate).getDate() !== new Date(currentDay).getDate() ? /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: styles.leftArrow,\n              onClick: onDecrement,\n              children: \"\\u1438\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.invisibleArrow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.day,\n              children: sprintDay\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.separator,\n              children: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.totalDays,\n              children: duration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), new Date(endDate).getDate() !== new Date(currentDay).getDate() ? /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: styles.rightArrow,\n              onClick: onIncrement,\n              children: \"\\u1433\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.invisibleArrow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.date,\n            children: new Date(currentDay).toJSON().slice(0, 10).split('-').reverse().join('.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.control,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.baseWrapper,\n          children: /*#__PURE__*/_jsxDEV(ChangeTitle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonBox,\n          children: [/*#__PURE__*/_jsxDEV(RoundButton, {\n            onClick: () => setShowModal(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.buttonDescription,\n            children: \"Create task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tasksHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.tasksHeaderText,\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.tasksHeaderText,\n          children: [\"Scheduled \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 23\n          }, this), \"hours\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.tasksHeaderText,\n          children: \"Hours spent / per day \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.tasksHeaderText,\n          children: \"Hours spent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskFilter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainModal, {\n      showModal: showModal,\n      setShowModal: setShowModal,\n      onClose: () => setShowModal(false),\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        onClose: () => setShowModal('')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SprintHeader, \"XrmT6KMk43MVlI0LBGnbxN3UDpc=\", false, function () {\n  return [useSelector, useParams, useSelector];\n});\n\n_c = SprintHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"SprintHeader\");","map":{"version":3,"sources":["/home/bogdan/project-manager-app/src/components/taskPageContent/taskHeader/TaskHeader.jsx"],"names":["React","useEffect","useState","styles","MainModal","TaskForm","ChangeTitle","RoundButton","TaskFilter","useSelector","getSprintsSelector","useParams","getCurrentDay","SprintHeader","setTaskDate","showModal","setShowModal","sprints","sprintId","startDate","find","item","_id","duration","endDate","_MS_PER_DAY","currentDay","setCurrentDay","Date","now","sprintDay","setSprintDay","curDay","result","parse","Math","floor","body","document","querySelector","style","overflow","onDecrement","prev","onIncrement","headerWrapper","sprintHeader","controlAndSearchBlock","controlPanel","switch","getDate","leftArrow","invisibleArrow","day","separator","totalDays","rightArrow","date","toJSON","slice","split","reverse","join","control","baseWrapper","buttonBox","buttonDescription","tasksHeader","tasksHeaderText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styles from './TaskHeader.module.css';\r\nimport MainModal from '../../../shared/mainModal/MainModal';\r\nimport TaskForm from '../../taskForm/TaskForm';\r\nimport ChangeTitle from '../../titleEditor/TitleEditor';\r\nimport RoundButton from '../../../shared/roundButton/RoundButton';\r\nimport TaskFilter from '../taskFilter/TaskFilter';\r\nimport { useSelector } from 'react-redux';\r\nimport { getSprintsSelector } from '../../../redux/sprints/sprints-selectors';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getCurrentDay } from '../../../redux/tasks/task-selectors';\r\n\r\nexport default function SprintHeader({ setTaskDate }) {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const sprints = useSelector(getSprintsSelector);\r\n  const { sprintId } = useParams();\r\n  const startDate = sprints.find(item => item._id === sprintId)?.startDate;\r\n  const duration = sprints.find(item => item._id === sprintId)?.duration;\r\n  const endDate = sprints.find(item => item._id === sprintId)?.endDate;\r\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n  const [currentDay, setCurrentDay] = useState(Date.now());\r\n  const [sprintDay, setSprintDay] = useState(0);\r\n  const curDay = useSelector(getCurrentDay);\r\n\r\n  useEffect(() => {\r\n    const result = (Date.now() - Date.parse(startDate)) / _MS_PER_DAY;\r\n    setSprintDay(Math.floor(result + 1));\r\n  }, [startDate, _MS_PER_DAY, sprintId]);\r\n\r\n  useEffect(() => {\r\n    setCurrentDay(curDay);\r\n  }, [sprintId, curDay]);\r\n\r\n  useEffect(() => {\r\n    setTaskDate(currentDay);\r\n  }, [sprintDay, setTaskDate, currentDay]);\r\n\r\n  useEffect(() => {\r\n    const body = document.querySelector('body');\r\n    body.style.overflow = showModal ? 'hidden' : 'auto';\r\n  }, [showModal]);\r\n\r\n  const onDecrement = () => {\r\n    setCurrentDay(prev => prev - _MS_PER_DAY);\r\n    setSprintDay(prev => prev - 1);\r\n  };\r\n\r\n  const onIncrement = () => {\r\n    setCurrentDay(prev => prev + _MS_PER_DAY);\r\n    setSprintDay(prev => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.headerWrapper}>\r\n      <section className={styles.sprintHeader}>\r\n        <div className={styles.controlAndSearchBlock}>\r\n          <div className={styles.controlPanel}>\r\n            {!!sprintDay && !!duration && Date.parse(startDate) <= currentDay && (\r\n              <div className={styles.switch}>\r\n                {new Date(startDate).getDate() !==\r\n                new Date(currentDay).getDate() ? (\r\n                  <button\r\n                    type=\"button\"\r\n                    className={styles.leftArrow}\r\n                    onClick={onDecrement}\r\n                  >\r\n                    &#5176;\r\n                  </button>\r\n                ) : (\r\n                  <span className={styles.invisibleArrow}></span>\r\n                )}\r\n\r\n                <span className={styles.day}>{sprintDay}</span>\r\n                <span className={styles.separator}>/</span>\r\n                <span className={styles.totalDays}>{duration}</span>\r\n\r\n                {new Date(endDate).getDate() !==\r\n                new Date(currentDay).getDate() ? (\r\n                  <button\r\n                    type=\"button\"\r\n                    className={styles.rightArrow}\r\n                    onClick={onIncrement}\r\n                  >\r\n                    &#5171;\r\n                  </button>\r\n                ) : (\r\n                  <span className={styles.invisibleArrow}></span>\r\n                )}\r\n              </div>\r\n            )}\r\n            <span className={styles.date}>\r\n              {new Date(currentDay)\r\n                .toJSON()\r\n                .slice(0, 10)\r\n                .split('-')\r\n                .reverse()\r\n                .join('.')}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.control}>\r\n          <div className={styles.baseWrapper}>\r\n            <ChangeTitle />\r\n          </div>\r\n          <div className={styles.buttonBox}>\r\n            <RoundButton onClick={() => setShowModal(true)} />\r\n            <p className={styles.buttonDescription}>Create task</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.tasksHeader}>\r\n          <p className={styles.tasksHeaderText}>Task</p>\r\n          <p className={styles.tasksHeaderText}>\r\n            Scheduled <br />\r\n            hours\r\n          </p>\r\n          <p className={styles.tasksHeaderText}>Hours spent / per day </p>\r\n          <p className={styles.tasksHeaderText}>Hours spent</p>\r\n\r\n          <TaskFilter />\r\n        </div>\r\n      </section>\r\n      <MainModal\r\n        showModal={showModal}\r\n        setShowModal={setShowModal}\r\n        onClose={() => setShowModal(false)}\r\n      >\r\n        <TaskForm onClose={() => setShowModal('')} />\r\n      </MainModal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}